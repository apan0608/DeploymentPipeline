{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Git Webhooks to clone repository contents to S3. For integrating 3rd party git products with AWS Services like CodePipeline/CodeBuild (qs-1nfhrd9bh)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General Settings"
                    },
                    "Parameters": [
                        "CustomDomainName"
                    ]
                },
                {
                "Label": {
                        "default": "Output Bucket Settings"
                    },
                     "Parameters": [
                        "OutputBucketName",
                        "DeleteBucketContentsRoleArn"
                    ]
                },
                {
                    "Label": {
                        "default": "SSH Key Encryption Settings"
                    },
                    "Parameters": [                     
                        "KeyBucketName",
                        "KMSKeyArn",
                        "CreateSSHKeyRoleArn"
                    ]
                },
                {
                    "Label": {
                        "default": "Git Pull Settings"
                    },
                    "Parameters": [
                        "ApiSecret",
                        "AllowedIps",
                        "GitPullRoleArn",
                        "WebHookRoleArn"
                    ]
                },            
                {
                    "Label": {
                        "default": "Copy and Zip Sourcee Code Configuration"
                    },
                    "Parameters": [
                        "SourceBucket",
                        "SourceSubFolder"                                               
                    ]
                }
            ],
            "ParameterLabels": {
                "AllowedIps": {
                    "default": "Allowed IPs"
                },
                "ApiSecret": {
                    "default": "API Secret"
                },
                "GitPullRoleArn": {
                    "default": "Git Pull Role Arn"
                },
                "WebHookRoleArn": {
                    "default": "Web Hook Role Arn"
                },
                "CustomDomainName": {
                    "default": "Custom Domain Name"
                },
                "OutputBucketName": {
                    "default": "Output S3 Bucket Name"
                },
                "SourceBucket": {
                    "default": "Source Code Bucket"
                },
                "SourceSubFolder": {
                    "default": "Source Code Sub Folder under Source Code Bucket"
                },
                "KMSKeyArn": {
                    "default": "KMS Key Arn"
                },
                "CreateSSHKeyRoleArn": {
                    "default": "Create SSH Key Role Arn"
                },
                "KeyBucketName": {
                    "default": "Key Bucket Name"
                },
                "DeleteBucketContentsRoleArn": {
                    "default": "Delete Bucket Contents Role Arn"
                }
            }
        }
    },
    "Parameters": {
        "AllowedIps": {
            "Description": "gitpull method only. Comma seperated list of IP CIDR blocks for source IP authentication. The BitBucket Cloud IP ranges are provided as defaults.",
            "Type": "String",
            "Default": "34.198.203.127/32,34.198.178.64/32,34.198.32.85/32,104.192.136.0/21"
        },
        "ApiSecret": {
            "Description": "gitpull method only. WebHook Secrets for use with GitHub Enterprise and GitLab. If a secret is matched IP range authentication is bypassed. Cannot contain: , \\ \"",
            "Type": "String",
            "Default": "",
            "NoEcho": "true"
        },
        "GitPullRoleArn": {
            "Description": "IAM Role to Allow Lambda Function to Execute a Pull Request on Git Repository",
            "Type": "String",
            "Default": ""
        },
        "WebHookRoleArn": {
            "Description": "IAM Role to Allow Api Gateway to Trigger Lambda Function",
            "Type": "String",         
            "Default": ""
        },
        "CustomDomainName": {
            "Description": "Use a custom domain name for the webhook endpoint, if left blank API Gateway will create a domain name for you",
            "Type": "String",
            "Default": ""
        },
        "OutputBucketName": {
            "Description": "Bucket Name where the zip file output should be placed",
            "Type": "String",
            "Default": "erm-pm-nonprod-git-integration-outputbucket"
        },
        "KeyBucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
                "ConstraintDescription": "Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
                "Default": "erm-pm-nonprod-keybucket",
                "Description": "S3 bucket name to store encryped private SSH key.",
                "Type": "String"
        },    
        "SourceBucket": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
                "ConstraintDescription": "Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
                "Default": "git-aws-integration",
                "Description": "S3 bucket name for the Source Code.",
                "Type": "String"
        },    
        "SourceSubFolder": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Sub Folder Name(Key prefix) can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "sourcecode/",
            "Description": "Sub Folder for the Source Code Assets.",
            "Type": "String"
        },        
        "KMSKeyArn": {           
            "Description": "Using an existing key for SSH key Encryption and Decryption",
            "Default": "",
            "Type": "String"
        },
        "CreateSSHKeyRoleArn": {
            "Description": "IAM Role for SSH key Encryption and Decryption",
            "Default": "",
            "Type": "String"
        },
        "DeleteBucketContentsRoleArn": {
            "Description": "IAM Role for Deleting Contents in the Output Bucket",
            "Default": "",
            "Type": "String"
        }
    },
    "Conditions": {
        "UseAllowedIps": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AllowedIps"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseApiSecret": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ApiSecret"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseCustomDomain": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "CustomDomainName"
                        },
                        ""
                    ]
                }
            ]
        }      
    },
    "Resources": {              
        "CreateSSHKeyLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "lambda_function.lambda_handler",
                "MemorySize": "128",
                "Role": {
                    "Ref": "CreateSSHKeyRoleArn"
                },
                "Runtime": "python2.7",
                "Timeout": "300",
                "Code": {
                    "S3Bucket": {
                        "Ref": "SourceBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${SourceSubFolder}functions/packages/CreateSSHKey/lambda.zip"
                    }
                }
            }
        },
        "CreateSSHKey": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CreateSSHKeyLambda",
                        "Arn"
                    ]
                },
                "KeyBucket": {
                    "Ref": "KeyBucketName"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "KMSKey": {
                    "Ref": "KMSKeyArn"
                }
            }
        },
        "DeleteBucketContentsLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "lambda_function.lambda_handler",
                "MemorySize": "128",
                "Role": {                    
                    "Ref": "DeleteBucketContentsRoleArn"                        
                },
                "Runtime": "python2.7",
                "Timeout": "300",
                "Code": {
                    "S3Bucket": {
                        "Ref": "SourceBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${SourceSubFolder}functions/packages/DeleteBucketContents/lambda.zip"
                    }
                }
            }
        },
        "DeleteBucketContents": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",           
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DeleteBucketContentsLambda",
                        "Arn"
                    ]
                },
                "KeyBucket": {
                    "Ref": "KeyBucketName"
                },
                "OutputBucket": {
                    "Ref": "OutputBucketName"
                }
            }
        },
        "GitPullLambda": {        
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "lambda_function.lambda_handler",
                "MemorySize": "128",
                "Role": {
                    "Ref": "GitPullRoleArn"
                },
                "Runtime": "python2.7",
                "Timeout": "300",
                "Code": {
                    "S3Bucket": {
                        "Ref": "SourceBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${SourceSubFolder}functions/packages/GitPullS3/lambda.zip"
                    }
                }
            }
        }, 
        "WebHookApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Body": {
                    "swagger": "2.0",
                    "info": {
                        "version": "2016-07-26T07:34:38Z",
                        "title": {
                            "Fn::Join": [
                                "",
                                [
                                    "G2CP-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    "schemes": [
                        "https"
                    ],
                    "paths": {
                        "/gitpull": {
                            "post": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "type": "aws",
                                    "credentials": {
                                        "Ref": "WebHookRoleArn"
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestParameters": {
                                        "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "httpMethod": "POST",
                                    "uri": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:apigateway:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":lambda:path//2015-03-31/functions/",
                                                {
                                                    "Fn::GetAtt": [
                                                        "GitPullLambda",
                                                        "Arn"
                                                    ]
                                                },
                                                "/invocations"
                                            ]
                                        ]
                                    },
                                    "requestTemplates": {
                                        "application/json": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "#set($allParams = $input.params())\n",
                                                    "{\n",
                                                    "\"body-json\" : $input.json('$'),\n",
                                                    "\"params\" : {\n",
                                                    "#foreach($type in $allParams.keySet())\n",
                                                    "    #set($params = $allParams.get($type))\n",
                                                    "\"$type\" : {\n",
                                                    "    #foreach($paramName in $params.keySet())\n",
                                                    "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
                                                    "        #if($foreach.hasNext),#end\n",
                                                    "    #end\n",
                                                    "}\n",
                                                    "    #if($foreach.hasNext),#end\n",
                                                    "#end\n",
                                                    "},\n",
                                                    "\"stage-variables\" : {\n",
                                                    "#foreach($key in $stageVariables.keySet())\n",
                                                    "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
                                                    "    #if($foreach.hasNext),#end\n",
                                                    "#end\n",
                                                    "},\n",
                                                    "\"context\" : {\n",
                                                    "    \"account-id\" : \"$context.identity.accountId\",\n",
                                                    "    \"api-id\" : \"$context.apiId\",\n",
                                                    "    \"api-key\" : \"$context.identity.apiKey\",\n",
                                                    "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
                                                    "    \"caller\" : \"$context.identity.caller\",\n",
                                                    "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
                                                    "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
                                                    "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
                                                    "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
                                                    "    \"http-method\" : \"$context.httpMethod\",\n",
                                                    "    \"stage\" : \"$context.stage\",\n",
                                                    "    \"source-ip\" : \"$context.identity.sourceIp\",\n",
                                                    "    \"user\" : \"$context.identity.user\",\n",
                                                    "    \"user-agent\" : \"$context.identity.userAgent\",\n",
                                                    "    \"user-arn\" : \"$context.identity.userArn\",\n",
                                                    "    \"request-id\" : \"$context.requestId\",\n",
                                                    "    \"resource-id\" : \"$context.resourceId\",\n",
                                                    "    \"resource-path\" : \"$context.resourcePath\",\n",
                                                    "    \"allowed-ips\" : \"$stageVariables.allowedips\",\n",
                                                    "    \"api-secrets\" : \"$stageVariables.apisecrets\",\n",
                                                    "    \"key-bucket\" : \"",
                                                    {
                                                        "Ref": "KeyBucketName"
                                                    },
                                                    "\",\n",
                                                    "    \"output-bucket\" : \"$stageVariables.outputbucket\",\n",
                                                    "    \"public-key\" : \"",
                                                    {
                                                        "Ref": "CreateSSHKey"
                                                    },
                                                    "\",\n",
                                                    "    \"raw-body\" : \"$util.escapeJavaScript($input.body).replace(\"\\'\",\"'\")\"\n",
                                                    "    }\n",
                                                    "}"
                                                ]
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "securityDefinitions": {
                        "sigv4": {
                            "type": "apiKey",
                            "name": "Authorization",
                            "in": "header",
                            "x-amazon-apigateway-authtype": "awsSigv4"
                        }
                    },
                    "definitions": {
                        "Empty": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "WebHookApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "WebHookApi"
                },
                "StageName": "DummyStage"
            }
        },
        "WebHookApiProdStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "WebHookApiDeployment"
                },
                "RestApiId": {
                    "Ref": "WebHookApi"
                },
                "StageName": "Prod",
                "Variables": {
                    "outputbucket": {
                        "Ref": "OutputBucketName"
                    },
                    "allowedips": {
                        "Fn::If": [
                            "UseAllowedIps",
                            {
                                "Ref": "AllowedIps"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "apisecrets": {
                        "Fn::If": [
                            "UseApiSecret",
                            {
                                "Ref": "ApiSecret"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                }
            }
        },
        "CustomDomainCertificate": {
            "Condition": "UseCustomDomain",
            "Type": "AWS::CertificateManager::Certificate",
            "Properties": {
                "DomainName": {
                    "Ref": "CustomDomainName"
                }
            }
        },
        "WebHookApiCustomDomainName": {
            "Condition": "UseCustomDomain",
            "Type": "AWS::ApiGateway::DomainName",
            "Properties": {
                "CertificateArn": {
                    "Ref": "CustomDomainCertificate"
                },
                "DomainName": {
                    "Ref": "CustomDomainName"
                }
            }
        },
        "WebHookApiCustomDomainNameMapping": {
            "Condition": "UseCustomDomain",
            "Type": "AWS::ApiGateway::BasePathMapping",
            "Properties": {
                "DomainName": {
                    "Ref": "CustomDomainName"
                },
                "RestApiId": {
                    "Ref": "WebHookApi"
                }
            }
        }
    },
    "Outputs": {
        "CustomDomainNameCNAME": {
            "Value": {
                "Fn::If": [
                    "UseCustomDomain",
                    {
                        "Fn::GetAtt": [
                            "WebHookApiCustomDomainName",
                            "DistributionDomainName"
                        ]
                    },
                    ""
                ]
            }
        },
        "PublicSSHKey": {
            "Value": {
                "Ref": "CreateSSHKey"
            }
        },
        "GitPullWebHookApi": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        " https://",
                        {
                            "Fn::If": [
                                "UseCustomDomain",
                                {
                                    "Ref": "CustomDomainName"
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "WebHookApi"
                                            },
                                            ".execute-api.",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ".amazonaws.com"
                                        ]
                                    ]
                                }
                            ]
                        },
                        "/",
                        {
                            "Ref": "WebHookApiProdStage"
                        },
                        "/gitpull"
                    ]
                ]
            }
        }
    }
}